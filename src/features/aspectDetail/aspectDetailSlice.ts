import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { URLS } from '../../constants/urls';
import axios, { AxiosError } from 'axios';

// Thunk for searching resources based on a search term
export const getAspectDetail = createAsyncThunk('aspectDetail/getAspectDetail', async (requestData: any , { rejectWithValue }) => {
  try {
    // search from your API endpoint 
    axios.defaults.headers.common['Authorization'] = requestData.id_token ? `Bearer ${requestData.id_token}` : '';
    
    const response = await axios.post(URLS.API_URL + URLS.GET_ASPECT_DETAIL, {
      name:requestData.resource
    });

    const data = await response.data;

    return data;
    //return mockSearchData; // For testing, we return mock data

  } catch (error) {
    if (error instanceof AxiosError) {
      return rejectWithValue(error.response?.data || error.message);
    }
    return rejectWithValue('An unknown error occurred');
  }
});

// ResourcesState defines the shape of the resources slice of the Redux state.
// It includes an array of items, a status to track loading state, and an error message
type SampleDataState = {
  items: unknown; // Replace 'unknown' with your actual resource type
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | undefined | unknown | null;
};

const initialState: SampleDataState = {
  items: [],
  status: 'idle',
  error: null,
};

// createSlice generates actions and reducers for a slice of the Redux state.
export const aspectDetailSlice = createSlice({
  name: 'aspectDetail',
  initialState,
  reducers: {}, // No synchronous reducers needed for this slice
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk.
  extraReducers: (builder) => {
    builder
      .addCase(getAspectDetail.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAspectDetail.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload; // Replace the list with search results
      })
      .addCase(getAspectDetail.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload; // Use payload from rejectWithValue
      });
  },
});

export default aspectDetailSlice.reducer;
