import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { URLS } from '../../constants/urls';
import axios, { AxiosError } from 'axios';

// createAsyncThunk is used for asynchronous actions.
// It will automatically dispatch pending, fulfilled, and rejected actions.
export const fetchEntry = createAsyncThunk('entry/fetchEntry', async (requestData: any , { rejectWithValue }) => {
  // If the search term is empty, we are returning an empty list.
  if (!requestData) {
    return [];
  }

  // If the term is not empty, we will perform a search.
  try {
    // search from your API endpoint 
    axios.defaults.headers.common['Authorization'] = requestData.id_token ? `Bearer ${requestData.id_token}` : '';
    const entryName = requestData.entryName
    
    const response = await axios.get(URLS.API_URL + URLS.GET_ENTRY + `?entryName=${entryName}`);
    const data = await response.data;
    return data;
    //return mockSearchData; // For testing, we return mock data

  } catch (error) {
    if (error instanceof AxiosError) {
      return rejectWithValue(error.response?.data || error.message);
    }
    return rejectWithValue('An unknown error occurred');
  }
});

export const fetchLineageEntry = createAsyncThunk('entry/fetchLineageEntry', async (requestData: any , { rejectWithValue }) => {
  // If the search term is empty, we are returning an empty list.
  if (!requestData) {
    return [];
  }

  // If the term is not empty, we will perform a search.
  try {
    // search from your API endpoint 
    axios.defaults.headers.common['Authorization'] = requestData.id_token ? `Bearer ${requestData.id_token}` : '';
    const fqn = requestData.fqn
    
    const response = await axios.get(URLS.API_URL + URLS.GET_ENTRY_BY_FQN + `?fqn=${fqn}`);
    const data = await response.data;
    return data;
    //return mockSearchData; // For testing, we return mock data

  } catch (error) {
    if (error instanceof AxiosError) {
      return rejectWithValue(error.response?.data || error.message);
    }
    return rejectWithValue('An unknown error occurred');
  }
});


type EntryState = {
  items: unknown; // Replace 'unknown' with your actual resource type
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | undefined | unknown | null;
  lineageEntryItems: unknown; // Replace 'unknown' with your actual resource type
  lineageEntrystatus: 'idle' | 'loading' | 'succeeded' | 'failed';
  lineageEntryError: string | undefined | unknown | null;
  lineageToEntryCopy: boolean;
  history: unknown[]; // Stack to track previous entries
};

const initialState: EntryState = {
  items: [],
  status: 'idle',
  error: null,
  lineageEntryItems: [],
  lineageEntrystatus: 'idle',
  lineageEntryError: null,
  lineageToEntryCopy:false,
  history: []
};

// createSlice generates actions and reducers for a slice of the Redux state.
export const entrySlice = createSlice({
  name: 'entry',
  initialState,
  reducers: {
    setEntry: (state, action) => {
      state.items = action.payload;
      state.status = 'succeeded';
    },
    setLineageToEntryCopy: (state, action) => {
      state.lineageToEntryCopy = action.payload;
    },
    pushToHistory: (state) => {
      // Push current entry to history before setting new entry
      if (state.items && Object.keys(state.items).length > 0) {
        state.history.push(state.items);
      }
    },
    popFromHistory: (state) => {
      // Pop the last entry from history and set it as current
      if (state.history.length > 0) {
        state.items = state.history.pop();
        state.status = 'succeeded';
      }
    },
    clearHistory: (state) => {
      state.history = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk.
  extraReducers: (builder) => {
    builder
      .addCase(fetchEntry.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchEntry.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchEntry.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })
      .addCase(fetchLineageEntry.pending, (state) => {
        state.lineageEntrystatus = 'loading';
        if(state.lineageToEntryCopy){
          state.status = 'loading';
        }
      })
      .addCase(fetchLineageEntry.fulfilled, (state, action) => {
        state.lineageEntrystatus = 'succeeded';
        state.lineageEntryItems = action.payload;
        // Also store in items so ViewDetails can access it
        if(state.lineageToEntryCopy){
          state.items = action.payload;
          state.status = 'succeeded';
          state.lineageToEntryCopy = false;
        }
      })
      .addCase(fetchLineageEntry.rejected, (state, action) => {
        state.lineageEntrystatus = 'failed';
        state.lineageEntryError = action.payload;
        if(state.lineageToEntryCopy){
          state.status = 'failed';
          state.error = action.payload;
          state.lineageToEntryCopy = false;
        }
      });
  },
});

export const { setEntry, pushToHistory, popFromHistory, clearHistory } = entrySlice.actions;
export default entrySlice.reducer;