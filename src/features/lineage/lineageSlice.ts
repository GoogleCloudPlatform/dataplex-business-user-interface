import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { URLS } from '../../constants/urls';
import axios, { AxiosError } from 'axios';

// createAsyncThunk is used for asynchronous actions.
// It will automatically dispatch pending, fulfilled, and rejected actions.
export const fetchLineageSearchLinks = createAsyncThunk('lineage/fetchLineageSearchLinks', async (requestData: any , { rejectWithValue }) => {
  // If the search term is empty, we are returning an empty list.
  if (!requestData) {
    return [];
  }

  // If the term is not empty, we will perform a search.
  try {
    // search from your API endpoint 
    axios.defaults.headers.common['Authorization'] = requestData.id_token ? `Bearer ${requestData.id_token}` : '';
    let parent = requestData.parent;
    let fqn = requestData.fqn;
    
    const response = await axios.post(URLS.API_URL + URLS.LINEAGE_SEARCH, {
      parent: parent,
      fqn:fqn
    });
    const data = await response.data;
    return data;
    //return mockSearchData; // For testing, we return mock data

  } catch (error) {
    if (error instanceof AxiosError) {
      return rejectWithValue(error.response?.data || error.message);
    }
    return rejectWithValue('An unknown error occurred');
  }
});


type LineageState = {
  items: unknown; // Replace 'unknown' with your actual resource type
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | undefined | unknown | null;
};

const initialState: LineageState = {
  items: [],
  status: 'idle',
  error: null,
};

// createSlice generates actions and reducers for a slice of the Redux state.
export const lineageSlice = createSlice({
  name: 'lineage',
  initialState,
  reducers: {}, // No synchronous reducers needed for this slice
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk.
  extraReducers: (builder) => {
    builder
      .addCase(fetchLineageSearchLinks.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchLineageSearchLinks.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchLineageSearchLinks.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      });
  },
});

export default lineageSlice.reducer;
